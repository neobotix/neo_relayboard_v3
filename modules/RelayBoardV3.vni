package neo_relayboard_v3;

module RelayBoardV3{
	map<vnx.TopicPtr, string> topics_board_to_ros;                   // [Pilot topic => ROS topic]
	map<string, map<string, vnx.TopicPtr>> topics_ros_to_board;      // [ROS type => [ROS topic => Pilot Topic]]
	vector<vnx.TopicPtr> topics_from_board;                          // supplementary topics
	map<string, string> topics_to_ros;                               // [key => ROS topic]
	
	string platform_interface_server = "PlatformInterface";
	string safety_server = "SafetyInterface";
	string launcher_server = "RelayBoardV3Launcher";
	int board_init_interval_ms = 1500;
	int update_interval_ms = 500;
	vnx.Object remote_config;
	
	int max_publish_queue_ros = 1;
	int max_subscribe_queue_ros = 1;
	
	pilot.kinematic_type_e kinematic_type;
	
	void handle(vnx.LogMsg value);
	void handle(pilot.Incident value);
	void handle(pilot.SystemState value);
	void handle(pilot.SafetyState value);
	void handle(pilot.EmergencyState value);
	void handle(pilot.BatteryState value);
	void handle(pilot.PowerState value);
	void handle(pilot.kinematics.bicycle.DriveState value);
	void handle(pilot.kinematics.differential.DriveState value);
	void handle(pilot.kinematics.mecanum.DriveState value);
	void handle(pilot.kinematics.omnidrive.DriveState value);
	void handle(pilot.RelayBoardV3Data value);
	void handle(pilot.IOBoardData value);
	void handle(pilot.USBoardData value);
}
