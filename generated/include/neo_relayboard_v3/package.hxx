
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_neo_relayboard_v3_PACKAGE_HXX_
#define INCLUDE_neo_relayboard_v3_PACKAGE_HXX_

#include <vnx/Type.h>

#include <vnx/package.hxx>


namespace neo_relayboard_v3 {


class RelayBoardV3Base;

extern const vnx::TypeCode* const vnx_native_type_code_RelayBoardV3Base; ///< \private

} // namespace neo_relayboard_v3


namespace vnx {

void read(TypeInput& in, ::neo_relayboard_v3::RelayBoardV3Base& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::neo_relayboard_v3::RelayBoardV3Base& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::neo_relayboard_v3::RelayBoardV3Base& value); ///< \private

void write(std::ostream& out, const ::neo_relayboard_v3::RelayBoardV3Base& value); ///< \private

void accept(Visitor& visitor, const ::neo_relayboard_v3::RelayBoardV3Base& value); ///< \private

/// \private
template<>
struct type<::neo_relayboard_v3::RelayBoardV3Base> {
	void read(TypeInput& in, ::neo_relayboard_v3::RelayBoardV3Base& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::neo_relayboard_v3::RelayBoardV3Base& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::neo_relayboard_v3::RelayBoardV3Base& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::neo_relayboard_v3::RelayBoardV3Base& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::neo_relayboard_v3::RelayBoardV3Base& value) {
		vnx::accept(visitor, value);
	}
};


} // namespace vnx

#endif // INCLUDE_neo_relayboard_v3_PACKAGE_HXX_
